#!/usr/bin/python -tt

# The Following Agent Has Been Tested On:
#
# Multiple Teckin TE22 with Espurna 
#
# Be aware that ipaddr should be the base IP
# and the port number will be added to that IP
#
# NOTE: Requires python-requests

import sys, time
import atexit
import logging
sys.path.append("/usr/share/fence")
from fencing import *
from fencing import fail_usage, fail, EC_STATUS

import requests

GET_HEADERS = {'accept': 'application/json', 'OData-Version': '4.0'}

def get_plug_ip(options):
    ipv=options["--ipaddr"].split(".")
    ipv[3]=str(int(ipv[3])+int(options["--plug"]))
    return '.'.join(ipv)

def get_plug_url(options):
    return "http://"+get_plug_ip(options)+"/api/relay/0?apikey="+options["--apikey"]

def send_get_request(conn, url):
    try:
        resp = requests.get(url,
                            headers=GET_HEADERS,
                            timeout=5)
    except requests.exceptions.Timeout:
        fail(EC_STATUS)
    except requests.exceptions.RequestException as e:
        fail(EC_STATUS)
    
    if resp.status_code == 403: 
        fail_usage("Failed: You have to enter correct espurna apikey!")
    if resp.status_code != 200: 
        fail_usage("Failed: Code received from espurna plug incorrect: "+str(resp.status_code)+"!")
    
    try:
        status=resp.json()['relay/0']
    except:
        fail(EC_STATUS)
    
    return status

def get_power_status(conn, options):
    url = get_plug_url(options)
    status = send_get_request(conn, url)
    if status =="0": return "off"
    if status =="1": return "on"
    fail_usage("Failed: You have to enter base ipaddr number!")

def set_power_status(conn, options):
    base_url = get_plug_url(options)
    if options['--action'] == "on": send_get_request(conn,url+"&value=1")
    if options['--action'] == "off": send_get_request(conn,url+"&value=0")
    if options['--action'] == "reboot": 
        send_get_request(conn,url+"&value=0")
        time.sleep(2)
        send_get_request(conn,url+"&value=1")
    if options['--action'] in ["status", "monitor"]:
        res = get_power_status(None,options) 
        if res == "on": return 0
        if res == "off": return 2
        return 1 # Failed
    if options['--action'] == "list":
        res = get_power_status(None,options)
        if res == "failed": return 1
        return 0
    
def main():
    device_opt = ["ipaddr", "web", "apikey"]

    atexit.register(atexit_handler)

    all_opt["apikey"] = {
            "getopt" : ":",
            "longopt" : "apikey",
            "help" : "--apikey                  Put espurna api key",
            "required" : "0",
            "shortdesc" : "Put espurna api key",
            "order" : 1}
    
    options = check_input(device_opt, process_input(device_opt))

    docs = {}
    docs["shortdesc"] = "Fence agent for espurna IoT"
    docs["longdesc"] = "fence_espurna is an I/O Fencing agent \
which can be used with IoT plug devices flashed with espurna. \
It uses espurna apikey to access device api. The ipaddr should \
be the base IP address for all plugs. \
\n.P\n\
For example if we have 4 hosts with 172.31.0.101 - 172.31.0.104 \
the ipaddr should be the base IP 172.31.0.100 where the number \
of the port will be added. "
    docs["vendorurl"] = "https://github.com/xoseperez/espurna"
    show_docs(options, docs)

    ## Operate the fencing device
    result = fence_action(None, options, set_power_status, get_power_status, None)
    sys.exit(result)

if __name__ == "__main__":
    main()

